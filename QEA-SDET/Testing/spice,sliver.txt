Silver creek:

import java.util.*;
 
public class ProjectInfoMain {
private Map<String, String> projectMap;
 
public ProjectInfoMain() {
projectMap = new HashMap<>();
}
 
public Map<String, String> getProjectMap() {
return projectMap;
}
 
public void setProjectMap(Map<String, String> projectMap) {
this.projectMap = projectMap;
}
 
public int findTheCountOfProjectsBasedOnTheConstructionType(String constructionType) {
int count = 0;
for (String type : projectMap.values()) {
if (type.equalsIgnoreCase(constructionType)) {
count++;
}
}
return count;
}
 
public List<String> findProjectIdsBasedOnTheConstructionType(String constructionType) {
List<String> projectIds = new ArrayList<>();
for (Map.Entry<String, String> entry : projectMap.entrySet()) {
if (entry.getValue().equalsIgnoreCase(constructionType)) {
projectIds.add(entry.getKey());
}
}
return projectIds;
}
 
public static void main(String[] args) {
Scanner scanner = new Scanner(System.in);
System.out.println("Enter number of projects to be added:");
int numOfProjects = scanner.nextInt();
scanner.nextLine(); // Consume newline character
 
ProjectInfoMain projectInfoMain = new ProjectInfoMain();
System.out.println("Enter the project (Project Id: Construction type):");
for (int i = 0; i < numOfProjects; i++) {
String input = scanner.nextLine();
String[] parts = input.split(":");
String projectId = parts[0].trim();
String constructionType = parts[1].trim();
projectInfoMain.getProjectMap().put(projectId, constructionType);
}
 
System.out.println("Enter the Construction type to be searched:");
String searchConstructionType = scanner.nextLine();
 
int count = projectInfoMain.findTheCountOfProjectsBasedOnTheConstructionType(searchConstructionType);
System.out.println("The projects based on " + searchConstructionType + " are " + count);
 
System.out.println("Enter the Construction type to identify the Project Ids:");
String filterConstructionType = scanner.nextLine();
 
List<String> projectIds = projectInfoMain.findProjectIdsBasedOnTheConstructionType(filterConstructionType);
if (projectIds.isEmpty()) {
System.out.println("No Project Ids were found for the " + filterConstructionType);
} else {
System.out.println("Projects based on " + filterConstructionType + " are");
for (String projectId : projectIds) {
System.out.println(projectId);
}
}
}
}

---------------------------------------------------------------------------------------------------------
Spice:

class Spice {
    private String spiceName;
    private String origin;
    private int spiceRating;
    private String color;
    private int shelfLifeInMonths;
 
    public Spice(String spiceName, String origin, int spiceRating, String color, int shelfLifeInMonths) {
        this.spiceName = spiceName;
        this.origin = origin;
        this.spiceRating = spiceRating;
        this.color = color;
        this.shelfLifeInMonths = shelfLifeInMonths;
    }
 
    public String getSpiceName() {
        return spiceName;
    }
 
    public void setSpiceName(String spiceName) {
        this.spiceName = spiceName;
    }
 
    public String getOrigin() {
        return origin;
    }
 
    public void setOrigin(String origin) {
        this.origin = origin;
    }
 
    public int getSpiceRating() {
        return spiceRating;
    }
 
    public void setSpiceRating(int spiceRating) {
        this.spiceRating = spiceRating;
    }
 
    public String getColor() {
        return color;
    }
 
    public void setColor(String color) {
        this.color = color;
    }
 
    public int getShelfLifeInMonths() {
        return shelfLifeInMonths;
    }
 
    public void setShelfLifeInMonths(int shelfLifeInMonths) {
        this.shelfLifeInMonths = shelfLifeInMonths;
    }
 
    public String findSpiceLevel() {
        if (shelfLifeInMonths <= 0) {
            return "Error";
        } else if (spiceRating >= 1 && spiceRating < 4) {
            return "Mild";
        } else if (spiceRating >= 4 && spiceRating < 7) {
            return "Medium";
        } else if (spiceRating >= 7 && spiceRating <= 9) {
            return "Hot";
        } else {
            return "Error";
        }
    }
}
 
public class UserInterface {
    public static Spice extractDetails(String spiceDetails) {
        String[] details = spiceDetails.split(":");
        if (details.length != 5) {
            System.out.println("Invalid spice details");
            return null;
        }
        try {
            String spiceName = details[0];
            String origin = details[1];
            int spiceRating = Integer.parseInt(details[2]);
            String color = details[3];
            int shelfLifeInMonths = Integer.parseInt(details[4]);
 
            return new Spice(spiceName, origin, spiceRating, color, shelfLifeInMonths);
        } catch (NumberFormatException e) {
            System.out.println("Invalid spice details");
            return null;
        }
    }
 
    public static void main(String[] args) {
        // Sample usage
        System.out.println("Enter the details:");
        String spiceDetails = "Chilli Pepper:Central America:9:Red:2";
        Spice spice = extractDetails(spiceDetails);
        if (spice != null) {
            System.out.println("Spice Name: " + spice.getSpiceName());
            System.out.println("Origin: " + spice.getOrigin());
            System.out.println("Spice Rating: " + spice.getSpiceRating());
            System.out.println("Spice Color: " + spice.getColor());
            System.out.println("Spice Shelf Life: " + spice.getShelfLifeInMonths());
            System.out.println("Spice Level: " + spice.findSpiceLevel());
        }
    }
}
-----------------------------------------------------------------------------------------------------
continuation for spice qn: 

class Spice {
private String spiceName;
private String origin;
private int spiceRating;
private String color;
private int shelfLifeInMonths;
 
public Spice(String spiceName, String origin, int spiceRating, String color, int shelfLifeInMonths) {
this.spiceName = spiceName;
this.origin = origin;
this.spiceRating = spiceRating;
this.color = color;
this.shelfLifeInMonths = shelfLifeInMonths;
}
 
public String getSpiceName() {
return spiceName;
}
 
public void setSpiceName(String spiceName) {
this.spiceName = spiceName;
}
 
public String getOrigin() {
return origin;
}
 
public void setOrigin(String origin) {
this.origin = origin;
}
 
public int getSpiceRating() {
return spiceRating;
}
 
public void setSpiceRating(int spiceRating) {
this.spiceRating = spiceRating;
}
 
public String getColor() {
return color;
}
 
public void setColor(String color) {
this.color = color;
}
 
public int getShelfLifeInMonths() {
return shelfLifeInMonths;
}
 
public void setShelfLifeInMonths(int shelfLifeInMonths) {
this.shelfLifeInMonths = shelfLifeInMonths;
}
 
public String findSpiceLevel() {
if (shelfLifeInMonths <= 0) {
return "Error";
} else if (spiceRating >= 1 && spiceRating < 4) {
return "Mild";
} else if (spiceRating >= 4 && spiceRating < 7) {
return "Medium";
} else if (spiceRating >= 7 && spiceRating <= 9) {
return "Hot";
} else {
return "Error";
}
}
}
 
public class UserInterface {
public static Spice extractDetails(String spiceDetails) {
String[] details = spiceDetails.split(":");
if (details.length != 5) {
System.out.println("Invalid spice details");
return null;
}
try {
String spiceName = details[0];
String origin = details[1];
int spiceRating = Integer.parseInt(details[2]);
String color = details[3];
int shelfLifeInMonths = Integer.parseInt(details[4]);
 
return new Spice(spiceName, origin, spiceRating, color, shelfLifeInMonths);
} catch (NumberFormatException e) {
System.out.println("Invalid spice details");
return null;
}
}
 
public static void main(String[] args) {
// Sample usage
System.out.println("Enter the details:");
String spiceDetails = "Chilli Pepper:Central America:9:Red:2";
Spice spice = extractDetails(spiceDetails);
if (spice != null) {
System.out.println("Spice Name: " + spice.getSpiceName());
System.out.println("Origin: " + spice.getOrigin());
System.out.println("Spice Rating: " + spice.getSpiceRating());
System.out.println("Spice Color: " + spice.getColor());
System.out.println("Spice Shelf Life: " + spice.getShelfLifeInMonths());
System.out.println("Spice Level: " + spice.findSpiceLevel());
}
}
}
has context menu
-----------------------------------------------------------------------------------------------------
unique numbers:

import java.util.*;
import java.text.*;
public class Main{
public static void main(String[]args)
{int j=0;
Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
j=UserMainCode.getUnique(n);
if(j>0)
{
System.out.println("Not Unique");
}
else if(j==0)
{
System.out.println("Unique");
}
}}

---------------------------------------------
class UserMainCode
{
public static int getUnique(int n)
{
int []a=new int[100];
int i=0,count=0;
while(n!=0)
{
int num=n%10;
a[i]=num;
i++;
n=n/10;
}
for(int j=0;j<=i-1;j++)
{
for(int k=j+1;k<=i-1;k++)
{
if(a[j]==a[k]){
count++;
}
}}
return count;
}
}
